@model TopMenuModel
        <!-- Brand and toggle get grouped for better mobile display -->
<div class="navbar-header">
    <button aria-expanded="false" data-target="#mobile-menu" data-toggle="collapse" class="navbar-toggle collapsed" type="button">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
    </button>
</div>
<!-- Collect the nav links, forms, and other content for toggling -->
<ul class="mega-menu">
    @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })
    @if (Model.DisplayHomePageMenuItem)
    {
        <li><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
    }
    @{
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
    }
    <li class="has-sublist with-dropdown-in-grid">
        <span href="@Url.RouteUrl("NewProducts")">Products</span>
        <div class="dropdown categories fullWidth boxes-4">
            <div class="row-wrapper">
                <div class="row">
                    @foreach (var category in rootCategories)
                    {
                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                        {
                            Category = category
                        };
                        @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                    }
                </div>
            </div>
        </div>
    </li>
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.DisplayManufacturersMenuItem)
    {
        <li class="manufacturermenu">
            <a href="@Url.RouteUrl("ManufacturerList")"><span>Manufacturers</span></a>
            <div class="dropdown manufacturers fullWidth boxes-6">
                <div class="row-wrapper">
                    <div class="row">
                        @await Component.InvokeAsync("ManufacturerMenu")
                    </div>
                </div>
            </div>
        </li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })
</ul>
<script type="text/javascript" asp-location="Footer">
    $(document).ready(function () {
        $(".mega-menu .dropdown .fa-angle-down").click(function () {
            var $this = $(this);
            $this.siblings("ul.dropdown-menu").slideToggle("slow", function () {
                if ($this.siblings("ul.dropdown-menu").css('display') == 'block')
                    $this.addClass("rotate");
                else if ($this.siblings("ul.dropdown-menu").css('display') == 'none')
                    $this.removeClass("rotate");
            });
        });

        $(".k-widget").hover(
            function () {
                $(this).parent().find(".k-dropdown-wrap").addClass('k-skate-hover');
            }
        , function () {
            $(this).parent().find(".k-dropdown-wrap").removeClass('k-skate-hover');
            }
        );
    });
</script>



